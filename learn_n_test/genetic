import random
from deap import base, creator, tools


# 自定义类
creator.create("FitnessMax", base.Fitness, weights=(1.0,))
creator.create("Individual", list, fitness=creator.FitnessMax)

# 注册函数
toolbox = base.Toolbox()
toolbox.register("attr_bool", random.randint, 0, 1)  # 生成参数
toolbox.register("individual", tools.initRepeat, creator.Individual, toolbox.attr_bool, 100)  # 生成个体
toolbox.register("population", tools.initRepeat, list, toolbox.individual)  # 生成种群


def evalOneMax(individual):
    return sum(individual),


# Operator registering
toolbox.register("evaluate", evalOneMax)
toolbox.register("mate", tools.cxTwoPoint)
toolbox.register("mutate", tools.mutFlipBit, indpb=0.05)
toolbox.register("select", tools.selTournament, tournsize=3)


def main():
    # 初始种群
    pop = toolbox.population(n=300)

    # 算法参数，交配率、变异率、迭代次数
    CXPB, MUTPB, NGEN = 0.5, 0.2, 40

    # 评价每个个体
    fitnesses = list(map(toolbox.evaluate, pop))
    for ind, fit in zip(pop, fitnesses):
        ind.fitness.values = fit

    # 开始迭代
    for g in range(NGEN):
        print("#%i" % g, end="\t")

        # 生成后代
        offspring = toolbox.select(pop, len(pop))
        offspring = list(map(toolbox.clone, offspring))  # 确保后代均为新的对象

        # 交配
        for child1, child2 in zip(offspring[::2], offspring[1::2]):
            if random.random() < CXPB:
                toolbox.mate(child1, child2)
                del child1.fitness.values
                del child2.fitness.values

        # 变异
        for mutant in offspring:
            if random.random() < MUTPB:
                toolbox.mutate(mutant)
                del mutant.fitness.values

        # 重新计算新的适应度
        invalid_ind = [ind for ind in offspring if not ind.fitness.valid]
        fitnesses = map(toolbox.evaluate, invalid_ind)
        for ind, fit in zip(invalid_ind, fitnesses):
            ind.fitness.values = fit

        # 种群更新
        pop = offspring

        # 统计结果
        fits = [ind.fitness.values[0] for ind in pop]
        length = len(pop)
        mean = sum(fits) / length
        sum2 = sum(x * x for x in fits)
        std = abs(sum2 / length - mean ** 2) ** 0.5

        print("Min %i" % min(fits), end="\t")
        print("Max %i" % max(fits), end="\t")
        print("Avg %.2f" % mean, end="\t")
        print("Std %.2f" % std)

    # 打印结果
    best_ind = tools.selBest(pop, 1)[0]
    print("最优个体：%s\n适应度%s" % (best_ind, best_ind.fitness.values))

if __name__ == '__main__':
    main()